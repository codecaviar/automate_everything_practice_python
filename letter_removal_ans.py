# Automate Everything from @codecaviar
# Level: Basic
# Updated: 2020-11-07

# Fill each function stub according to the docstring
# Run tests with this command: "python3 -m doctest [filename].py -v"

# As you progress and problems get harder, there will be many ways of
# producing the correct results. Keep in mind that the answers to
# practice problems should be used as a reference, but are by no means
# the only ways of answering the questions.

def letter_removal(input_string, remove_count):
    """
    Given lower case string, remove a specific number of characters:
    First remove all letter 'a', followed by letter 'b', then 'c',
    etc...remove the leftmost character first.

    Parameters
    ----------
    input_string: {string} lower case string
    remove_count: {int} integer of characters to remove

    Returns
    -------
    {string}: output after removing specific number of characters

    Example
    -------
    >>> letter_removal('hxehmvkybeklnj', 5)
    xmvkyklnj
    >>> letter_removal('cccaabababaccbc', 9)
    cccccc
    >>> letter_removal('mtapctrsrnrcjhdqfprvsfzgyhovglvovueyegygcrknjvwnaojkvuxpiyjwrfljfllixxhdxruouzkkyvpzertomryvughzbzwfijjinzfhxjrxcpvqmmpfpijfqwznvijxzhysdbphfklvfzwrebmlvcmalifckfzjprkktyojfnaxiallldfjnuarzljdoqyusgjcgoiticqnbftbvslgmgaosbkrizajmczuibhbguqgxbnshxpfnfpayogdlhylsrobyiwlzgedirrptafwwglhvneuruexsukalwdhdnlffygsdkcpqqsjoenvddgfpzhgsjegsxeuifdfaywkyhzdyxolvqbchxmjoxpylqlawwmgesqjultgzaealnslitoyxusuykizjxzwpzkkfpgjmhohhwjgmbekxhuxsynxktrlwnogrsxshhofzqtsbbutwuhflezksljjyyzoqohmwlsgclcggxkvfdspsoyoamgkpkldhyoofcdnfbrytjqnrhcxnevositqpruiwdcnexzijftddxjctlgwntceuyaufznlhiipwdxbaukbeftzjjytddweudpwwvbxohtfgjlvlnjhketgcyldatcsndopldvgsdtwuilffuwpzzxczirtagtecbsfhshwhpwoxcscaagkfbmcqoiptermprnchahjamaedgedavriycpfviiezhpfgwsjucksjvdbmzkwaudvgjdctlywvqvrjlfoneebzdmodmkpljhsvpkhgbbwtzcstdkgtezkxxjlpejumwkdlctaujljlwqawgzglmohvrdlvfkxclcgsegwaszkixjcxkdaybkzasizautlryrfcuetesulgkpxixfnbbbejdvqdxflflvchbnqtkmarkdwezaocssjarzanzxdtzyhbyhlljqbvyyvgmsitfcwhesgwtzoeqlflklxltruddohknalxtasawwutcrlnvriuchljyiqsahjteqrbakhxiokokhylmvhdbfdvgopkcrdzmnigstbaiehiwnrjgoqfjpinkgtxxkkxvlxmdamlxdmpulodoyujyfcvtiefqwhlcvlaltrqhpplfclvnaccebrxfeziursuigvuercgunsqzwsvskbordmrdvlupayublwtrnxhystlqakhzuztqcvlwqxhphzsmjsnutacgxazxbumtmglngivkdmqaxocjhsxvotynomtrzwhaydlwvskqivqhchvucchifsumydpumsyfmrwombaufzemosxsobtnfukatsgqypvvfunfcuzhdjmtndbvejscspmcbjhrokwagbhytqiibfwpbwvjjilbuhpdiiluyiajqdmxxsgmvdoahfpclfxbtcfeyxxjynfrcdjdxxxonioxxvvwabqhcrdvenqsrzylaprxlyxbwefyfabfnomhzhteaeqxeokdlnieniamuvejoazupmenqaynkoyrmaliojrdhvpirfrzobfafxokqqagujnigzbzvdwtwygrwjryzdbhmewisirbasncvzqsmliohmixbartuelizmlkyexxdopgsfhhzcszqfgqjrwbuyecanuhxptbltmrbxfiqntnbjpyriwpsajoocctjrkqqdpfztighvvqyriwqtreoqgfhfvfjtoexibojylcpvymbacjuadmrkaugcecacufcqavbjwhqaoohglrfwdpdaizyvrhblzopittojyohtjyhxuykzvwxszyqlclobtyygzvmyasfsxyowyminljxoiwlanijegsrssuoijjtchxtnawkqrkladlmshiwcyedhwpgxbwqeqsjxpsmrxznqrqhwudzbrbglnwyqjpjitupdbvuzocitktgqnhaxkiyfhrwthhwihhxhiiiaheaficfgfjyqiiqprgbxksfqxipifdjnjtfkaklfibgrkixpcbzkutysclmsmdwxlczjzltgnomxkvcdhhhqwifdebjkieuzfntulttvutjusgbiolegndlegadosvlhymqafjcezdnxyeunjwiylomxlrohbzhqvrlisqviggnxsesubksvnoanpltqahdbteelnmkqjqsuuwluvblhjfbehyrwqoghqqhxksvuavynhgtkwrncgcwwnmigqthbxoyuoqsxrmqurcwqaonugqvosvnuaelgolpnhlwqwnpvjznfahvthwvornuxgkkbjdgdnqsbokvqfdfzqtjrovtlpvvygzziqxnsjlwjoyugwibmkptpwxlhbrjrqczgogelolpvrraycrjxghxfevhunxdxddkqrdyizjqdzuudnmlllleqbdqgrvfgpkmkwnyklhvgsmvxbnaoyaxssmnzaaqqqzmxqxbtpqonbgkeujybxbhhsycvoyeavsvshvmjuusvnafvjmjsxymiwgnpldokogswzpmowgmbzxyjhfyjfyporgkvcubvzyiwznynlvvlqbvofyebrsjngsmgjgxypolzquyxgrkbikyfqwbakmuoyizezrxjduecqsjvqgkdzltwdesiqxervybiauglfofowyaldvgoivobfkjpatnvjmhewularungifhkrgqxfquernvlizsehhdnxbklkiscnaekomlnakkrakloygkflgmcjnygjkrjyvusrtwoekfnqkztwfpjtcfzrkwnexrdvgrdjpwynzvmgkgycukohflskixewjuijjhrbhskjnbvfglqwkwlfjpqylvecqyfafbetztzwyeruabvyxxcwibgcuuqtxpxgqojxlpxfrpvdmlrdifvmkxubxgjnvrmxtprofvudrziaivgxslziezfbgeenyevpplkomkzoaoxetvefeatwalsdrmwwzdzeejbjxjghiaebfrmqtriepgauvrhymvmcfhwvjmpjsutioglnbqxtpzzexcrsbbugrkjllydjhcbqrirolgkdvfpmfvuhuldmirjtkhpxgiacsumqmrcjmnugvwgmfjpbktgyovfngczxvigmorjxixaszcdsyfgfxecxljiyxvwgkrijlwmtjcwoxkqeupkmtcnbydoqwkvvodrmrwnsytzwyvafwisffjwhifvurorlievhlmdxqsjtqxezykteegljdnvyrclyyhqybarcflvoughiqabkdyswhzbekdrrtsgnnzdtnbprugccpapzufzktmaszvsccqpqgiwjzbocazqvjogebuvrsnorgmfquwpsdmscllptxpdtkbuujusitxlmryoxdovfhnuqvmgiiocqzizkcmnnhmbyjqebkmfzfnxsjaeszlywnfrwuvmxtjybzzxxtpntrnsyawmdwagevdmzduqotryovzlumidveoflazlelsquhstimmfcesyvqckesntwkfhsdfqkgjxbgtartztbinyopboxcyentkqyytoqrsiafbmehteijvjjubillnhjlidxfvgzoagdjfzwdiryoiswbrpmtzecuemyxjruxquyemcjvchiprliynqjpmuzbzqwbrbnkmniyrzxglqovieklxffymahdvebrbbxojnwyephljflmrutcnnqeehypvlxcyrrhmvictjtfnlmtndcgpkfzzafsmgvhjbkeqpiwnvhiuhldyqzdekxknvjliejhjllgaqkibdpishnutdxmjeovqzercegwbaouvxgxdianrkveihcczgxqxxvntxwodtnkmejuvmtuacwjecllhehoxupycoqoezwoefravmgumbghpbfmavepotsokyvmtjrydhqkdkdnrdrtbwqfyvhcuuytjgescvwhcnpbmzbrodhayehnaklkctiebxdkahdipdlrzndnkosqezpcfklvtzqjspkzzkjgbxedarsngwtirvhpobasfwwacizqplobgtlmnphcwarrqjyztaaamtvsmwilb', 2652)
    ttsvszyvvvuyyvwvuxywxxxuuzyvztyvuzzwzxxvwzvxzysvzwvztyxuzyusttvsszzuuxsxyysywztwwvuuxsuwyssvzssxuywyzyxvxxywwsutzstyxusuyzxzwzwxuxsyxtwsxsztsutwuzsyyzwsxvssyyytxvstuwxztxtwtuyuzwxutzytwuwwvxtvtytsvstwuuwzzxzttsswwxstvyvzwsusvzwuvtywvvzsvwtzsttzxxuwtuwwzvvxswszxxyzszutyutsuxxvxvtwzsszzxtzyyvyyvstwswtzxtuxtswwutvuystxyvvzstwtxxxvxxuyuyvtwvtvxzusuvuuszwsvsvuyuwtxystzuztvwxzssutxzxutvxsxvtytzwywvsvvusuyusywuzsxstutsyvvuuztvsswytwwvuuyxxsvxtyxxyxxxxxvvwvszyxyxwyztxuvzuyyrrvrrzxuzzvwtwyrwryzwsrsvzsxrtuzyxxszszrwuyuxttrxtyrwstrztvvyrwtrvtxyvyuruuvwrwzyvrzttytyxuyzvwxszytyyzvyssxywyxwsrssutxtwrswywxwsxsrxzrwuzrwytuvuzttxyrwtwxyrxsxtrxzutysswxzztxvwuztuttvutussvyzxyuwyxrzvrsvxssusvttsuuwuvyrwxsvuvytwrwwtxyusxrurwuvsvuwwvzvtwvruxsvztrvtvvyzzxswyuwtwxrrzvrryrxxvuxxryzzuurvwyvsvxyxsszzxxtuyxsyvyvsvsvuusvvsxywswzwzxyyyrvuvzywzyvvvyrssxyzuyxrywuyzzrxusvztwsxrvyuwyvvtvwururxurvzsxsryyryvusrtwztwtzrwxrvrwyzvyusxwursvwwyvytztzwyruvyxxwuutxxxxrvrvxuxvrxtrvurzvxszzyvzxtvtwsrwwzzxrtruvryvwvsutxtzzxrsuryrrvvuurtxsuruvwtyvzxvrxxszsyxxyxvwrwtwxutywvvrrwsytzwyvwswvurrvxstxzytvyryyyrvuyswzrrtsztruzuztszvswzzvuvrsruwsstxtuuustxryxvuvzzyzxsszywrwuvxtyzzxxttrsywwvzutryvzuvzsustsyvstwsxtrtztyxytyytrstvuxvzzwryswrtzuyxruxuyvryuzzwryrzxvxyvrxwyrutyvxyrrvtttzzsvwvuyzxvsutxvzrwuvxxrvzxxxvtxwtuvtuwxuyzwrvuvtsyvtryrrtwyvuuytsvwzrytxrzszvtzszzxrswtrvswwztwrryzttvsw
    """

    # Optional: use try...except block to handle error conditions

    # Sort all letters in string from a to z
    # Use string slicing up to the remove_count number
    for l in sorted(input_string)[:remove_count]:
        # Remove each letter up to the remove_count number
        # By sorting the string first, already handles a to z order
        input_string = input_string.replace(l,'',1)

    return print(input_string)
