# Automate Everything from @codecaviar
# Level: Intermediate
# Updated: 2020-11-17

# Fill each function stub according to the docstring
# Run tests with this command: "python3 -m doctest [filename].py -v"

def calc_factorial(f):
    """
    Takes one argument and returns factorials of the number

    Parameters
    ----------
    f: {int} integer to calculate factorials

    Returns
    -------
    {int}: one factorial

    Example
    -------
    >>> calc_factorial(123)
    12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000
    >>> calc_factorial(456)
    150777392777717065903328562798297482932764849966301315324902295697797980802999492049275470580840593582700556154654997912467653672836190567363944536581444396786039028419417159553169852939652733499484374432647121409002713034716885273557660568294514238651304204026421026217797122437474581042706674997505548774529387552185264469304745879944335896334980134727576771262477699704913814778801164976379963316514713032786305083016847394455111607701177156363125206697642497352441989049637406799105387152093299654856194446887474831405921359722324720996553956200165400519069670468845686118517860926559421327845227712982865242890852011587912148558934925229259778865164753102371910801614732061965104129730561590839408147446252948841011789641706225763887234100676084552005497753764496546383864694159909979495432469993306110242973486330432796522331628915418533758582252153753291412897349335363154308911927972242304805109760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    >>> calc_factorial(789)

    """

    # Optional: use try...except block to handle error conditions

    pass # null operation, placeholder when a statement is required    

def sum_permutations(num):
    """
    Find the sum of all numbers with the same digits(permutations) including duplicates - use efficient algorithms

    Parameters
    ----------
    num: {int} integer with various number of digits

    Returns
    -------
    {int}: sum of all digits and pemutations

    Example
    -------
    >>> sum_permutations(9665158017)
    19353599998064640
    >>> sum_permutations(1579294917)
    21772799997822720
    >>> sum_permutations(632493041)
    143359999856640
    """

    # Optional: use try...except block to handle error conditions

    pass # null operation, placeholder when a statement is required
